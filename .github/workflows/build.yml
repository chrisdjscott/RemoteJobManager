name: Build

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Building the RJM python package
      - name: Build the package
        run: python -m pip install .[dev]

      - name: Check rjm_batch_submit command installed
        run: rjm_batch_submit --help
      - name: Check rjm_batch_wait command installed
        run: rjm_batch_wait --help

      # Run unit tests
      - name: Run tests
        run: pytest
      
  pyinstaller:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Building the RJM python package
      - name: Build the package
        run: python -m pip install .[dev]

      # Build executables using PyInstaller just on Windows
      - name: Build rjm_batch_submit
        run: pyinstaller -F ../../rjm/cli/rjm_batch_submit.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_batch_wait
        run: pyinstaller -F ../../rjm/cli/rjm_batch_wait.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_authenticate
        run: pyinstaller -F ../../rjm/cli/rjm_authenticate.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_config
        run: pyinstaller -F ../../rjm/cli/rjm_config.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_restart
        run: pyinstaller -F ../../rjm/cli/rjm_restart.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_health_check
        run: pyinstaller -F ../../rjm/cli/rjm_health_check.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_batch_cancel
        run: pyinstaller -F ../../rjm/cli/rjm_batch_cancel.py
        working-directory:  ./extra/pyinstaller
      - name: Build rjm_batch_run
        run: pyinstaller -F ../../rjm/cli/rjm_batch_run.py
        working-directory:  ./extra/pyinstaller
      - name: Dump license files
        run: |
          pip-licenses -f plain-vertical -l --output-file dist/bundled_licenses.txt
          echo "Python license: https://docs.python.org/3/license.html" >> dist/bundled_licenses.txt
        working-directory: ./extra/pyinstaller

      # Run Pyinstaller built health check on Windows, if the secrets existed
      - name: Run pyinstaller built health check
        run: dist/rjm_health_check.exe --help
        working-directory: ./extra/pyinstaller

      # archive the binaries and upload
      - name: Archive binaries
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: extra/pyinstaller/dist
          filename: RemoteJobManager-${{ runner.os }}.zip

      # upload as an artifact of the build
      - uses: actions/upload-artifact@v3
        with:
          name: RemoteJobManager-${{ runner.os }}
          path: extra/pyinstaller/dist/RemoteJobManager-*.zip

      # only if it's a tag, add the archive to the release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: extra/pyinstaller/dist/RemoteJobManager-*.zip

  realtest:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Building the RJM python package
      - name: Build the package
        run: python -m pip install .[dev]

      # Secrets required for running real tests
      - run: mkdir -p ~/.rjm
      - run: printf "${RJM_CONFIG}" > ~/.rjm/rjm_config.ini
        shell: bash
        env:
          RJM_CONFIG: ${{ secrets.RJM_CONFIG }}
        if: env.RJM_CONFIG != null
      - run: printf "${RJM_TOKENS}" > ~/.rjm/rjm_tokens.json
        shell: bash
        env:
          RJM_TOKENS: ${{ secrets.RJM_TOKENS }}
        if: env.RJM_TOKENS != null
      - name: "Check if RJM secrets are set"
        id: rjm_config_files
        shell: bash
        run: |
          if [[ -r ~/.rjm/rjm_tokens.json ]] && [[ -r ~/.rjm/rjm_config.ini ]]; then
            echo 'files_exist=true' >> $GITHUB_OUTPUT
          else
            echo 'files_exist=false' >> $GITHUB_OUTPUT
          fi

      # If the secrets were set, run some real tests
      - name: Run the health check script
        run: rjm_health_check -ll debug
        if: steps.rjm_config_files.outputs.files_exist == 'true'
      - name: Run batch_submit for nonmem example
        run: rjm_batch_submit -f localdirs.txt -ll debug
        working-directory: ./examples/nonmem
        if: steps.rjm_config_files.outputs.files_exist == 'true'
      - name: Run batch_wait for nonmem example
        run: rjm_batch_wait -f localdirs.txt -ll debug -z 15 -o
        working-directory: ./examples/nonmem
        if: steps.rjm_config_files.outputs.files_exist == 'true'

      # Cleanup rjm config directory
      - run: rm ~/.rjm/*
        if: steps.rjm_config_files.outputs.files_exist == 'true'
