name: Build

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
        python-version: ['3.9']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python --version

      # Building the RJM python package
      - name: Build the package
        run: python -m pip install .[dev]

      - name: Check rjm_batch_submit command installed
        run: rjm_batch_submit --help
      - name: Check rjm_batch_wait command installed
        run: rjm_batch_wait --help

      # Run unit tests
      - name: Run tests
        run: pytest
      
      # Secrets required for running real test using the nonmem example
      - run: mkdir -p ~/.rjm
      - run: printf "${RJM_CONFIG}" > ~/.rjm/rjm_config.ini
        shell: bash
        env:
          RJM_CONFIG: ${{ secrets.RJM_CONFIG }}
        if: env.RJM_CONFIG != null
      - run: printf "${RJM_TOKENS}" > ~/.rjm/rjm_tokens.json
        shell: bash
        env:
          RJM_TOKENS: ${{ secrets.RJM_TOKENS }}
        if: env.RJM_TOKENS != null
      - name: "Check RJM config files existence"
        id: rjm_files
        uses: andstor/file-existence-action@v1
        with:
          files: "~/.rjm/rjm_tokens.json, ~/.rjm/rjm_config.ini"

      # If the secrets were set, run some real tests
      - name: Run the health check script
        run: rjm_health_check
        if: steps.rjm_files.outputs.files_exists == 'true'
      - name: Run batch_submit for nonmem example
        run: rjm_batch_submit -f localdirs.txt -ll debug
        working-directory: ./examples/nonmem
        if: steps.rjm_files.outputs.files_exists == 'true'
      - name: Run batch_wait for nonmem example
        run: rjm_batch_wait -f localdirs.txt -ll debug -z 15
        working-directory: ./examples/nonmem
        if: steps.rjm_files.outputs.files_exists == 'true'

      # Build executables using PyInstaller just on Windows
      - name: Build rjm_batch_submit
        run: pyinstaller -F ../../rjm/cli/rjm_batch_submit.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Build rjm_batch_wait
        run: pyinstaller -F ../../rjm/cli/rjm_batch_wait.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Build rjm_authenticate
        run: pyinstaller -F ../../rjm/cli/rjm_authenticate.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Build rjm_configure
        run: pyinstaller -F ../../rjm/cli/rjm_configure.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Build rjm_health_check
        run: pyinstaller -F ../../rjm/cli/rjm_health_check.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Build rjm_batch_cancel
        run: pyinstaller -F ../../rjm/cli/rjm_batch_cancel.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Build rjm_nesi_setup
        run: pyinstaller -F ../../rjm/cli/rjm_nesi_setup.py
        working-directory:  ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}
      - name: Dump license files
        run: |
          pip-licenses -f plain-vertical -l --output-file dist/bundled_licenses.txt
          echo "Python license: https://docs.python.org/3/license.html" >> dist/bundled_licenses.txt
        working-directory: ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}

      # Run Pyinstaller built health check on Windows, if the secrets existed
      - name: Run pyinstaller built health check
        run: dist/rjm_health_check.exe
        working-directory: ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' && steps.rjm_files.outputs.files_exists == 'true' }}

      # Run Pyinstaller built rjm_authenticate on Windows, if the secrets existed
      - name: Run pyinstaller built rjm_authenticate
        run: dist/rjm_authenticate.exe
        working-directory: ./extra/pyinstaller
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' && steps.rjm_files.outputs.files_exists == 'true' }}

      # Cleanup rjm config used for tests
      - run: rm ~/.rjm/*
        
      # archive the binaries and upload
      - name: Archive binaries
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: extra/pyinstaller/dist
          filename: RemoteJobManager-${{ runner.os }}.zip
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}

      # upload as an artifact of the build
      - uses: actions/upload-artifact@v2
        with:
          name: RemoteJobManager-${{ runner.os }}
          path: extra/pyinstaller/dist/RemoteJobManager-*.zip
        if: ${{ matrix.os == 'windows-2019' && matrix.python-version == '3.9' }}

      # only if it's a tag, add the archive to the release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: extra/pyinstaller/dist/RemoteJobManager-*.zip
